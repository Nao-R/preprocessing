
# COMMANDES LANCEMENT
# snakemake -s snakefile_1sample --rerun-triggers mtime --cluster "sbatch -J {params.name} -p {params.partition} -t {params.time} --mem {params.mem} --cpus-per-task {params.cpus} -o {params.out} -e {params.err}" --jobs 1 --use-conda --conda-frontend conda -np 

# ===== DEFINITION DES PATHS ===== #

# Raw data:
raw_dir="/beegfs/data/varaldi/BEDBUGS/batbugs/data/raw2/"           # données brutes chez JV     
# New data:
data_dir="/beegfs/data/nroscigni/bedbugs/quality_control/data/"
# Outputs contrôle qualité
qc_dir="/beegfs/data/nroscigni/bedbugs/quality_control/qc/"
# Conda environments:
conda_dir="/beegfs/data/nroscigni/bedbugs/quality_control/script/conda_env/"        
# Logiciels utilisés:
fastp_dir="/beegfs/home/varaldi/TOOLS/fastp"
# Logs:
logs_dir="/beegfs/data/nroscigni/bedbugs/quality_control/logs/"
# Benchmarks 
benchmarks_dir="/beegfs/data/nroscigni/bedbugs/quality_control/benchmark/"

# ===== DEFINITION DES ECHANTILLONS ===== #
import os

# All FASTQ samples
DATA = glob_wildcards("/beegfs/data/varaldi/BEDBUGS/batbugs/data/raw2/{sample}_R1.fastq.gz").sample
SAMPLES = ['Cimex443']

# SI BESOIN samples à inclure/exclure:  
# SAMPLES_INCLUDED/EXCLUDED = {'Cimex426', 'Cimex436', 'Cimex450', 'Cimex355', 'Cimex444', 'Cimex437', 'Cimex451', 'Cimex454', 'Cimex453','Cimex449', 'Cimex435', 'Cimex319','Cimex142'}

# Path where BAM files should exist
BAM_DIR = "/beegfs/data/nroscigni/bedbugs/quality_control/data/mapped/"

# SI BESOIN chels outputs manquent sans tout refaire car fichiers supprimés 
# ex. only keep samples: in SAMPLES_INCLUDED & without .sorted.bam 
# SAMPLES = [
    #sample for sample in DATA 
    #if (sample in SAMPLES_INCLUDED)
    #and (not (os.path.exists(f"{data_dir}/mapped/{sample}.sorted.bam")))]

print(f"Nombre d'échantillons à lancer :--) : {len(SAMPLES)}")
print(SAMPLES)


# =================================================================== RULE ALL =================================================================== #


# RULE ALL, appel le reste des règles
rule all:
    # Variant calling
    input: expand(data_dir+"deduplicated/stats/{sample}.tsv", sample= SAMPLES)


# ======================================================== VARIANT CALLING & FILTERING ========================================================== #


# CALCUL COUVERTURE & MEAN DEPTH
rule stats_covdp:
    params:
        name="stats{sample}",   
        partition="normal",
        out=logs_dir+"stats_covdp/{sample}.log",
        err=logs_dir+"stats_covdp/{sample}.err",
        time="00:40:00", 
        mem="3G",      
        cpus="1"
    input: 
        bam= data_dir+"deduplicated/{sample}.markedDup.bam",
    output:
        tsv= data_dir+"deduplicated/stats/{sample}.tsv"
    conda: conda_dir+"variants_env.yaml"    
    shell:
        """
        mkdir -p /beegfs/data/nroscigni/bedbugs/quality_control/data/deduplicated/stats/
        mkdir -p /beegfs/data/nroscigni/bedbugs/quality_control/logs/stats_covdp/

        samtools coverage {input.bam} | head -n 16 > {output.tsv} 
        """



# VARIANT CALLING
rule variant_calling:
    params:
        name="variant_calling{sample}",   
        partition="normal",
        out=logs_dir+"variant_calling/{sample}.log",
        err=logs_dir+"variant_calling/{sample}.err",
        time="04:00:00", 
        mem="25G",      
        cpus="8"
    input:
        bam= data_dir+"deduplicated/{sample}.markedDup.bam",
        #bai= data_dir+"deduplicated/{sample}.markedDup.bai",
        ref= data_dir+"ref_genome/Cimex_ref_genome.fa"
    output:
        bcf= data_dir+"variants/{sample}.bcf",
    conda: conda_dir+"variants_env.yaml"   
    shell:
        """
        mkdir -p /beegfs/data/nroscigni/bedbugs/quality_control/data/variants/
        mkdir -p /beegfs/data/nroscigni/bedbugs/quality_control/logs/variant_calling/Ò

        bcftools mpileup -Ou -f {input.ref} {input.bam} | bcftools call -m --ploidy 2 -Ob -o {output.bcf} >{params.out} 2>{params.err}
        """

# VARIANT FILTERING
rule variant_filter:
    params:
        name="variant_filtering{sample}",   
        partition="normal",
        out=logs_dir+"variant_calling/{sample}.filtered.log",
        err=logs_dir+"variant_calling/{sample}.filtered.err",
        time="10:00:00", 
        mem="15G",      
        cpus="3",
        min_qual= 30,      # min quality score ok
        min_dp= 5,         # min depth ok
        max_dp= 80,        # estimation couv moy par éch & plot histogram (80 comme départ)
    input:
        bcf= data_dir+"variants/{sample}.bcf",
    output:
        vcf= data_dir+"variants/{sample}filtered.vcf.gz",
    conda: conda_dir+"variants_env.yaml" 
    shell:
        """
        bcftools view {input.bcf} | bcftools filter -e 'QUAL < {params.min_qual} || DP < {params.min_dp} || DP > {params.max_dp}' >{params.out} 2>{params.err}
        """

        