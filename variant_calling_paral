
# COMMANDES LANCEMENT
# snakemake -s snakefile_1sample --rerun-triggers mtime --cluster "sbatch -J {params.name} -p {params.partition} -t {params.time} --mem {params.mem} --cpus-per-task {params.cpus} -o {params.out} -e {params.err}" --jobs 1 --use-conda --conda-frontend conda -np 

# ===== DEFINITION DES PATHS ===== #

# Raw data:
raw_dir="/beegfs/data/varaldi/BEDBUGS/batbugs/data/raw2/"           # données brutes chez JV     
# New data:
data_dir="/beegfs/data/nroscigni/bedbugs/quality_control/data/"
# Outputs contrôle qualité
qc_dir="/beegfs/data/nroscigni/bedbugs/quality_control/qc/"
# Conda environments:
conda_dir="/beegfs/data/nroscigni/bedbugs/quality_control/script/conda_env/"        
# Logiciels utilisés:
fastp_dir="/beegfs/home/varaldi/TOOLS/fastp"
# Logs:
logs_dir="/beegfs/data/nroscigni/bedbugs/quality_control/logs/"
# Benchmarks 
benchmarks_dir="/beegfs/data/nroscigni/bedbugs/quality_control/benchmark/"

# ===== DEFINITION DES ECHANTILLONS ===== #
import os

# All FASTQ samples
DATA = glob_wildcards("/beegfs/data/varaldi/BEDBUGS/batbugs/data/raw2/{sample}_R1.fastq.gz").sample
#SAMPLES = DATA

# SI BESOIN samples à inclure/exclure:  
SAMPLES_EXCLUDED = {'Cimex18-18', 'Cimex18-7'}

# Path where BAM files should exist
BAM_DIR = "/beegfs/data/nroscigni/bedbugs/quality_control/data/mapped/"

# SI BESOIN chels outputs manquent sans tout refaire car fichiers supprimés 
# ex. only keep samples: in SAMPLES_INCLUDED & without .sorted.bam 
SAMPLES = [
    sample for sample in DATA 
    if (sample not in SAMPLES_EXCLUDED)]
    #and (not (os.path.exists(f"{data_dir}/mapped/{sample}.sorted.bam")))]

print(f"Nombre d'échantillons à lancer :--) : {len(SAMPLES)}")
print(SAMPLES)


# =================================================================== RULE ALL =================================================================== #


# RULE ALL, appel le reste des règles
rule all:
    input: 
        expand(data_dir+"stats/{sample}.tsv", sample=SAMPLES),
        data_dir+"variants/mpileup_all_samples.bcf"


# ======================================================== VARIANT CALLING & FILTERING ========================================================== #


# CALCUL COUVERTURE & MEAN DEPTH
# pour potentiellement enlever des échantillons avant mpileup sur tous
rule stats_covdp:
    params:
        name="stats{sample}",   
        partition="normal",
        out=logs_dir+"stats_covdp/{sample}.log",
        err=logs_dir+"stats_covdp/{sample}.err",
        time="00:30:00", 
        mem="500M",      
        cpus="1"
    input: 
        bam= data_dir+"deduplicated/{sample}.markedDup.bam",
    output:
        tsv= data_dir+"stats/{sample}.tsv"
    conda: conda_dir+"variants_env.yaml"    
    shell:
        """
        mkdir -p /beegfs/data/nroscigni/bedbugs/quality_control/data/stats/
        mkdir -p /beegfs/data/nroscigni/bedbugs/quality_control/logs/stats_covdp/

        samtools coverage {input.bam} | head -n 16 > {output.tsv} || true
        """


# VARIANT CALLING
rule variant_calling_mpileup:
   params:
       name="variant_calling_mpileup_Cimex",
       partition="normal",
       out=logs_dir+"variant_calling/mpileup.log",
       err=logs_dir+"variant_calling/mpileup.err",
       time="16:00:00", 
       mem="30G",      # ??? comme pas possible test? 
       cpus="12"
   input:
       bam_list= data_dir+"deduplicated/bam_list.txt",
       ref= data_dir+"ref_genome/Cimex_ref_genome.fa"
   output:
       bcf= data_dir+"variants/mpileup_all_samples.bcf"
   conda: conda_dir+"variants_env.yaml"
   shell:
        """
        mkdir -p /beegfs/data/nroscigni/bedbugs/quality_control/data/variants/
        mkdir -p /beegfs/data/nroscigni/bedbugs/quality_control/logs/variant_calling/

        bcftools mpileup \
            --threads {params.cpus} \
            -a FORMAT/AD,FORMAT/DP,FORMAT/QS,FORMAT/SP,INFO/AD \
            -f {input.ref} \
            -r "scaffold_1" \
            -b {input.bam_list} \
            -Ou -o {output.bcf}

       """

rule variant_calling_call:
   params:
       name="variant_calling_call_Cimex",
       partition="normal",
       out=logs_dir+"variant_calling/call.log",
       err=logs_dir+"variant_calling/call.err",
       time="08:00:00", 
       mem="30G",      # ??? comme pas possible test? 
       cpus="8"
       samples_host= data_dir+"variants/Samples_Host.tsv"
   input:
       bcf= data_dir+"variants/mpileup_all_samples.bcf"
   output:
       bcf= data_dir+"variants/call_all_samples.bcf"
   conda: conda_dir+"variants_env.yaml"
   shell:
       """
        bcftools call \
        --group-samples {params.samples_host}
	    --format-fields GQ,GP \
	    --multiallelic-caller \
        -Ob \
	    -o {output.bcf} \
        {input.bcf}
       """

# VARIANT FILTERING
rule variant_filter:
    params:
        name="variant_filtering{sample}",  
        partition="normal",
        out=logs_dir+"variant_calling/{sample}.filtered.log",
        err=logs_dir+"variant_calling/{sample}.filtered.err",
        time="10:00:00",
        mem="15G",     
        cpus="3",
        min_qual= 30,      # min quality score ok
        min_dp= 4,         # min depth ok
        max_dp_ex= lambda wc, input: 
            " || ".join([
                f"(FORMAT/DP[{i}] > {max_dp})" 
                for i, (sample, max_dp) in enumerate(
                    [line.strip().split() for line in open(input.seuil)] # liste de liste type: [['Cimex1', '80']['Cimex2', '100']]etcetc
                    )])
   input:
        bcf= data_dir+"variants/call_all_samples.bcf",
        seuil= data_dir+"variants/sample_seuils.tsv"  # sampleID TAB max_dp
   output:
        filtered_bcf= data_dir+"variants/filtered_all_samples.bcf"
   conda: conda_dir+"variants_env.yaml"
   shell:
       """
        # hard filtering
        bcftools filter \
            -e 'QUAL < {params.min_qual} || FORMAT/DP < {params.min_dp} || ({params.max_dp_ex})' \
            -Ob -o {output.filtered_bcf} \
            {input.bcf}
        """
